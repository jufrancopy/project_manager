# Generated by Django 5.1.6 on 2025-03-07 18:28

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Dependency',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Nombre de la Dependencia')),
                ('email', models.EmailField(max_length=254, verbose_name='Correo Electrónico')),
                ('responsible', models.CharField(max_length=200, verbose_name='Responsable')),
                ('position', models.CharField(max_length=200, verbose_name='Cargo del Responsable')),
                ('additional_info', models.TextField(blank=True, null=True, verbose_name='Información Adicional')),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last auth')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('role', models.CharField(choices=[('admin', 'Administrador'), ('analyst', 'Analista de Proyecto'), ('applicant', 'Solicitante')], default='applicant', max_length=50, verbose_name='Rol')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
                ('dependency', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='projects.dependency', verbose_name='Dependencia')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Nombre del Proyecto')),
                ('leader', models.CharField(max_length=200, verbose_name='Líder del Proyecto')),
                ('description', models.TextField(verbose_name='Descripción')),
                ('request_date', models.DateField(verbose_name='Fecha de Solicitud')),
                ('project_type', models.CharField(choices=[('infra', 'Infraestructura'), ('med', 'Medicamentos e Insumos'), ('tic', 'TIC'), ('electro', 'Electromedicina'), ('econ', 'Prestaciones Económicas'), ('medic', 'Prestaciones Médicas'), ('talent', 'Talentos Humanos')], max_length=50, verbose_name='Tipo de Proyecto')),
                ('department', models.CharField(choices=[('asuncion', 'Asunción'), ('concepcion', 'Concepción'), ('san_pedro', 'San Pedro'), ('cordillera', 'Cordillera'), ('guaira', 'Guairá'), ('caaguazu', 'Caaguazú'), ('caazapa', 'Caazapá'), ('itapua', 'Itapúa'), ('misiones', 'Misiones'), ('paraguari', 'Paraguarí'), ('alto_parana', 'Alto Paraná'), ('central', 'Central'), ('ñeembucu', 'Ñeembucú'), ('amambay', 'Amambay'), ('canindeyu', 'Canindeyú'), ('presidente_hayes', 'Presidente Hayes'), ('boqueron', 'Boquerón'), ('alto_paraguay', 'Alto Paraguay'), ('nacional', 'Nacional')], max_length=50, verbose_name='Departamento')),
                ('status', models.CharField(choices=[('request', 'Solicitud de Elaboración de Proyecto'), ('analysis', 'Análisis de Factibilidad'), ('presentation', 'Presentación para Aprobación'), ('approval', 'Aprobación de Autoridades'), ('development', 'Desarrollo del Proyecto'), ('monitoring', 'Monitoreo y Evaluación')], default='request', max_length=50, verbose_name='Estado del Proyecto')),
                ('document', models.FileField(upload_to='project_documents/', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['doc', 'docx'])], verbose_name='Documento del Proyecto')),
                ('start_date', models.DateField(blank=True, null=True, verbose_name='Fecha de Inicio')),
                ('end_date', models.DateField(blank=True, null=True, verbose_name='Fecha de Finalización')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Creado por')),
                ('dependency', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='projects.dependency', verbose_name='Dependencia Solicitante')),
            ],
        ),
        migrations.CreateModel(
            name='Document',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(upload_to='documents/', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['pdf', 'doc', 'docx'])], verbose_name='Documento')),
                ('upload_date', models.DateTimeField(auto_now_add=True)),
                ('uploaded_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='documents', to='projects.project', verbose_name='Proyecto')),
            ],
        ),
        migrations.CreateModel(
            name='Task',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Nombre de la Tarea')),
                ('description', models.TextField(verbose_name='Descripción')),
                ('completed', models.BooleanField(default=False, verbose_name='Completado')),
                ('deadline', models.DateField(verbose_name='Fecha Límite')),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='projects.project', verbose_name='Proyecto')),
            ],
        ),
    ]
